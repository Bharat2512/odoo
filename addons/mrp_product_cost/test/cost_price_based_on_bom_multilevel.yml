-
  Test the following with user admin
-
  !context
    uid: 'base.user_root'
-
  Create a product Table A
-
  !record {model: product.product, id: product_product_table_a}:
    name: Table A
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 50.0
    list_price: 75.0
    manufacturing_cost: True
-
  Create a product Table B
-
  !record {model: product.product, id: product_product_table_b}:
    name: Table B
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 80.0
    list_price: 120.0
    manufacturing_cost: True
-
  Create a product Wood plank
-
  !record {model: product.product, id: product_product_plank_a}:
    name: Wood plank
    cost_method: standard
    uom_id: product.product_uom_cm
    standard_price: 20.0
    list_price: 15.0
    manufacturing_cost: True
-
  Create a product Red Paint Pot
-
  !record {model: product.product, id: product_product_red_paint_a}:
    name: Red Paint Pot
    cost_method: standard
    uom_id: product.product_uom_litre
    standard_price: 10.0
    list_price: 15.0
    manufacturing_cost: True
-
  Create a product Table wood leg
-
  !record {model: product.product, id: product_product_w_leg_a}:
    name: Table wood Leg
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 10.0
    list_price: 15.0
    manufacturing_cost: True
-
  Create a product Red table wood Leg
-
  !record {model: product.product, id: product_product_red_w_leg_a}:
    name: Red table wood Leg
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 15.0
    list_price: 20.0
    manufacturing_cost: True
-
  Create a product Chair
-
  !record {model: product.product, id: product_product_chair_a}:
    name: Chair
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 23.0
    list_price: 33.0
    manufacturing_cost: True
-
  Create a product Table and Chair
-
  !record {model: product.product, id: product_product_table_chair_a}:
    name: Table and Chair
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 150.0
    list_price: 200.0
    manufacturing_cost: True
-
  Create a product Multilevel bom
-
  !record {model: product.product, id: product_product_multilevel}:
    name: Multilevel bom
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 100
    list_price: 200.0
    manufacturing_cost: True
-
  Create a product Level A bom
-
  !record {model: product.product, id: product_product_multilevel_a}:
    name: Level A bom
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 100
    list_price: 200.0
    manufacturing_cost: True
-
  Create a product Level B bom
-
  !record {model: product.product, id: product_product_multilevel_b}:
    name: Level B bom
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 100
    list_price: 200.0
    manufacturing_cost: True
-
  Create a product Level C bom
-
  !record {model: product.product, id: product_product_multilevel_c}:
    name: Level C bom
    cost_method: standard
    uom_id: product.product_uom_litre
    standard_price: 200
    list_price: 200.0
    manufacturing_cost: True
-
  Test the cost price of Table A and Table B are updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_a'))
    assert product.standard_price == 50.0, "Cost price of Table A has not been recorded correctly"
    product = self.browse(cr, uid, ref('product_product_table_b'))
    assert product.standard_price == 80.0, "Cost price of Table B has not been recorded correctly"
# 
# The BoM structure will be the following
#  - Table A
#     - 2x Plank
#     - 4x Wood leg
#  - Table B
#     - 3x Plank
#     - 4x Red wood leg
#  - Red wood leg
#     - 1x Wood leg
#     - 1x Red paint pot
#   - Chair
#     - 1x Plank
#     - 4x Wood leg
#   - Table and Chair
#     - 1x Table
#     - 4x Chair
#   - Multilvel-bom
#     - 1x Level A bom
#        - 1x Level B bom
#          - 1x Level C bom

-
  I create Bill of Materials for the product Table A
-
  !record {model: mrp.bom, id: mrp_bom_table_a}:
    company_id: base.main_company
    name: Table A
    product_id: product_product_table_a
    product_qty: 1.0
    type: normal
    bom_lines:
      - company_id: base.main_company
        name: Plank
        product_id: product_product_plank_a
        product_qty: 2.0
      - company_id: base.main_company
        name: Wood Leg
        product_id: product_product_w_leg_a
        product_qty: 4.0
-
  Test the cost price of Table A is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 80.0, "Cost price of Table A has not been recorded correctly"
-
  I create Bill of Materials for Red wood leg
-
  !record {model: mrp.bom, id: mrp_bom_red_leg}:
    company_id: base.main_company
    name: Red wood leg
    product_id: product_product_red_w_leg_a
    product_qty: 1.0
    type: normal
    bom_lines:
      - company_id: base.main_company
        name: Paint pot
        product_id: product_product_red_paint_a
        product_qty: 1.0
      - company_id: base.main_company
        name: Wood Leg
        product_id: product_product_w_leg_a
        product_qty: 1.0
-
  Test the cost price of product Red wood leg is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_red_w_leg_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 20.0, "Cost price of Red wood leg has not been recorded correctly"
-
  I create Bill of Materials for the product Table B
-
  !record {model: mrp.bom, id: mrp_bom_table_b}:
    company_id: base.main_company
    name: Table B
    product_id: product_product_table_b
    product_qty: 1.0
    type: normal
-
  Add the product Plank
-
  !record {model: mrp.bom, id: mrp_bom_table_b_plank}:
    company_id: base.main_company
    name: Plank
    product_id: product_product_plank_a
    product_qty: 3.0
    bom_id: mrp_bom_table_b
-
  Add the product Red wood leg
-
  !record {model: mrp.bom, id: mrp_bom_table_b_red_w_leg}:
    company_id: base.main_company
    name: Red Wood Leg
    product_id: product_product_red_w_leg_a
    product_qty: 4.0
    bom_id: mrp_bom_table_b
-
  Test the cost price of Table B is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_b'))
    plank = self.browse(cr, uid, ref('mrp_bom_table_b_plank'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 140.0, "Cost price of Table B has not been recorded correctly"
-
  I modify Bill of Materials for the product Table B by adding 4 Wood leg
-
  !record {model: mrp.bom, id: mrp_bom_table_b_w_leg}:
    company_id: base.main_company
    name: Wood Leg
    product_id: product_product_w_leg_a
    product_qty: 4.0
    bom_id: mrp_bom_table_b
-
  Test the cost price of Table B is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_b'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 180.0, "Cost price of Table B has not been recorded correctly"
-
  I modify Bill of Materials for the product Table B by removing 4 wood leg
-
  !python {model: mrp.bom}: |
    self.unlink(cr, uid, [ref('mrp_bom_table_b_w_leg')])
-
  Test the cost price of Table B is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_b'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 140.0, "Cost price of Table B has not been recorded correctly"
-
  I modify Bill of Materials for the product Table B by changing Plank quantity
-
  !record {model: mrp.bom, id: mrp_bom_table_b_plank}:
    company_id: base.main_company
    name: Plank
    product_id: product_product_plank_a
    product_qty: 1.0
    bom_id: mrp_bom_table_b
-
  Test the cost price of product Table B is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_b'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 100.0, "Cost price of Table B has not been recorded correctly"
-
  I create Bill of Materials for the product Chair
-
  !record {model: mrp.bom, id: mrp_bom_chair_a}:
    company_id: base.main_company
    name: Chair
    product_id: product_product_chair_a
    product_qty: 1.0
    type: normal
    bom_lines:
      - company_id: base.main_company
        name: Plank
        product_id: product_product_plank_a
        product_qty: 1.0
      - company_id: base.main_company
        name: Wood Leg
        product_id: product_product_w_leg_a
        product_qty: 4.0
-
  Test the cost price of product Chair is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_chair_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 60.0, "Cost price of Chair has not been recorded correctly"
-
  I create Bill of Materials for the product Table and Chair
-
  !record {model: mrp.bom, id: mrp_bom_table_chair_a}:
    company_id: base.main_company
    name: Table and Chair
    product_id: product_product_table_chair_a
    product_qty: 1.0
    type: normal
    bom_lines:
      - company_id: base.main_company
        name: Table
        product_id: product_product_table_a
        product_qty: 1.0
      - company_id: base.main_company
        name: Chair
        product_id: product_product_chair_a
        product_qty: 4.0
-
  Test the cost price of product Table and Chair is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_chair_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 320.0, "Cost price of Table and Chair has not been recorded correctly"
-
  Modify the standard price of product Wood table leg 
-
  !record {model: product.product, id: product_product_w_leg_a}:
    standard_price: 5.0
-
  Test the cost price of product Wood leg is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_w_leg_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 5.0, "Cost price of product Wood leg has not been recorded correctly"
-
  Test the cost price of Red Wood leg is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_red_w_leg_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 15.0, "Cost price of Red Wood leg has not been recorded correctly"
-
  Test the cost price of product Table A is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 60.0, "Cost price of Table A has not been recorded correctly"
-
  Test the cost price of Table B is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_b'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 80.0, "Cost price of Table B has not been recorded correctly"
-
  Test the cost price of Chair is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_chair_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 40.0, "Cost price of Chair has not been recorded correctly"
-
  Test the cost price of product Table and Chair is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_table_chair_a'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 220.0, "Cost price of Table and Chair has not been recorded correctly"
-
  I create Bill of Materials for product Multilevel bom
-
  !record {model: mrp.bom, id: mrp_bom_multilevel}:
    company_id: base.main_company
    name: Multilevel bom product
    product_id: product_product_multilevel
    product_qty: 1.0
    type: normal
    bom_lines:
      - company_id: base.main_company
        name: Level A Bom product
        product_id: product_product_multilevel_a
        product_qty: 1.0
        bom_lines:
          - company_id: base.main_company
            name: Level B Bom product
            product_id: product_product_multilevel_b
            product_qty: 1.0
            bom_lines:
            - company_id: base.main_company
              name: Level C Bom product
              product_id: product_product_multilevel_c
              product_qty: 1.0
-
  Test the cost price of product Multilevel bom is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_multilevel'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 200.0, "Cost price of Multilevel bom has not been recorded correctly"
-
  I Create Bill of Materials for product Multilevel bom (> 3 Level)
-
  Create a New Product vehicle and sub product of vehicle
-
  !record {model: product.product, id: product_product_vehicle}:
    name: Vehicle
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 20000.0
    list_price: 500000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_product_engien}:
    name: Engine System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 50000.0
    list_price: 200000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_transmissionsystem}:
    name: Transmission System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 20000.0
    list_price: 50000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_bodysystem}:
    name: Body System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 30000.0
    list_price: 100000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_suspensionsystem}:
    name: Suspension System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 20000.0
    list_price: 50000.0
    manufacturing_cost: True
-
  Create Bill of Materials for Vehicle
-
  !record {model: mrp.bom, id: vehicle_bom_multilevel}:
    company_id: base.main_company
    name: Multilevel bom vehicle product
    product_id: product_product_vehicle
    product_qty: 1.0
    type: phantom
    bom_lines:
      - company_id: base.main_company
        product_id: product_product_engien
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_transmissionsystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_bodysystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_suspensionsystem
        product_qty: 1.0
-
  Create sub-product for Engine System Product
-
  !record {model: product.product, id: product_crank_drivesystem}:
    name: Crank-Drive Sub-System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 50000.0
    list_price: 150000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_Cylinder_blocksystem}:
    name: Cylinder Block Sub-System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 5000.0
    list_price: 10000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_cylinderheadsystem}:
    name: Cylinder Head Sub-System
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 5000.0
    list_price: 10000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_valvetrainsystem}:
    name: Valvetrain Subsystem
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 9000.0
    list_price: 10000.0
    manufacturing_cost: True
-
  Create sub-product for Crank-Drive System Product
-
  !record {model: product.product, id: product_cnnecting_rodsystem}:
    name: Connecting Rod Sub-Subsystem
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 50000.0
    list_price: 100000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_Piston_system}:
    name: Piston Sub-Subsystem
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 15000.0
    list_price: 20000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_crankshaftsystem}:
    name: Crankshaft Sub-Subsystem
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 15000.0
    list_price: 20000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_flywheelsystem}:
    name: Flywheel Sub-Subsystem
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 5000.0
    list_price: 10000.0
    manufacturing_cost: True
-
  Create sub-product for Connecting Rod Sub-Subsystem Product
-
  !record {model: product.product, id: product_Rod_system}:
    name: Rod - Connecting
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 10000.0
    list_price: 20000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_caprodsystem}:
    name: Cap - Rod,Connecting
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 9000.0
    list_price: 10000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_bearingsystem}:
    name: Bearing - Rod,Connecting
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 14500.0
    list_price: 15000.0
    manufacturing_cost: True
-
  !record {model: product.product, id: product_bolt_rodsystem}:
    name: Bolt - Rod, Cap Connecting
    cost_method: standard
    uom_id: product.product_uom_unit
    standard_price: 3000.0
    list_price: 5000.0
    manufacturing_cost: True
-
  Create Bill of Materials for Engine System Product
-
   !record {model: mrp.bom, id: engien_bom_multilevel}:
    company_id: base.main_company
    name: Multilevel Bom Engine System product
    product_id: product_product_engien
    product_qty: 1.0
    type: phantom
    bom_lines:
      - company_id: base.main_company
        product_id: product_crank_drivesystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_Cylinder_blocksystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_cylinderheadsystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_valvetrainsystem
        product_qty: 1.0
-
  Create Bill of Materials for Crank-Drive System Product
-
   !record {model: mrp.bom, id: crank_drive_bom_multilevel}:
    company_id: base.main_company
    name: Multilevel Bom Crank-Drive System product
    product_id: product_crank_drivesystem
    product_qty: 1.0
    type: phantom
    bom_lines:
      - company_id: base.main_company
        product_id: product_cnnecting_rodsystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_Piston_system
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_crankshaftsystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_flywheelsystem
        product_qty: 1.0
-
  Create Bill of Materials for Connecting Rod Sub-Subsystem Product
-
   !record {model: mrp.bom, id: cnnecting_rod_bom_multilevel}:
    company_id: base.main_company
    name: Bom Connecting Rod Sub-Subsystem product
    product_id: product_cnnecting_rodsystem
    product_qty: 1.0
    type: phantom
    bom_lines:
      - company_id: base.main_company
        product_id: product_Rod_system
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_caprodsystem
        product_qty: 1.0
      - company_id: base.main_company
        product_id: product_bearingsystem
        product_qty: 1.0
      - company_id: base.main_company 
        product_id: product_bolt_rodsystem
        product_qty: 1.0
-
  Test the cost price of product Multilevel ( > 3 Level) bom is updated correctly
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_vehicle'))
    self.button_compute_cost_price(cr, uid, [product.id], context=context)
    assert product.standard_price == 160500.0, "Cost price of Multilevel bom has not been recorded correctly"
